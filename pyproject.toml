[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "advanced-meme-fun-snipper"
version = "0.1.0"
description = "A production-ready bot for sniping new meme coins on Solana with Grok API analysis, Jupiter swaps, and safety precautions."
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Advanced Meme Fun Snipper Contributors"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dependencies = [
    "python-dotenv>=1.0.0",
    "solders>=0.20.0",
    "solana>=0.32.0",
    "openai>=1.0.0",
    "websocket-client>=1.6.0",
    "pymongo>=4.5.0",
    "python-telegram-bot>=20.0",
    "jupiter-python-sdk>=1.0.0",
    "requests>=2.31.0",
    "base58>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "black>=23.9.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "types-requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/joe83/Advanced-Meme-Fun-Snipper"
Repository = "https://github.com/joe83/Advanced-Meme-Fun-Snipper"
Issues = "https://github.com/joe83/Advanced-Meme-Fun-Snipper/issues"

[project.scripts]
advanced-meme-snipper = "advanced_meme_fun_snipper.snipper:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=advanced_meme_fun_snipper",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "B905", # zip without an explicit strict parameter
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.ruff.isort]
known-first-party = ["advanced_meme_fun_snipper"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.ruff_cache
    | __pycache__
    | build
    | dist
)/
'''

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
check_untyped_defs = false
disallow_untyped_defs = false

[tool.coverage.run]
source = ["src/advanced_meme_fun_snipper"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]